generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId  
  email         String   @unique
  hashedPassword String?
  name          String?
  emailVerified DateTime?
  avatar        String?
  image         String?
  role          String?  @default("Employee")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  employee      Employee? @relation // One-to-one relation with Employee
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)  // Now references `id`
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)  // Update to `id`
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id])  // Update to `id`
  @@unique([userId, credentialID])
}

enum NotificationType {
  EMPLOYEE_REQUEST
  LEAVE_REQUEST
  GENERAL
}

enum NotificationStatus {
  PENDING
  APPROVED
  REJECTED
  READ
}

enum AttendanceStatus {
  ON_TIME
  LATE
  ABSENT
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  type        NotificationType  @default(GENERAL)
  title       String
  message     String
  status      NotificationStatus @default(PENDING)
  sourceId    String?           @db.ObjectId
  targetId    String?           @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  read        Boolean           @default(false)
  
  employee    Employee?         @relation(fields: [sourceId], references: [id], onDelete: SetNull)
}

model Attendance {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String           @db.ObjectId
  date         String           // Store as YYYY-MM-DD format
  checkInTime  String           // Store as formatted time (e.g., "9:15 AM")
  checkOutTime String?          // Optional check-out time
  status       AttendanceStatus @default(ON_TIME)
  comments     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  // Relation to Employee
  employee     Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model LeaveRequest {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  employeeId      String           @db.ObjectId
  startDate       String           // Store as YYYY-MM-DD format
  endDate         String           // Store as YYYY-MM-DD format
  reason          String
  status          LeaveRequestStatus @default(PENDING)
  rejectionReason String?          // Optional field for rejection reason
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relation to Employee
  employee        Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Employee {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  mobileNumber      String
  email             String
  dateOfBirth       DateTime
  maritalStatus     String
  gender            String
  nationality       String
  address           String
  city              String
  state             String
  zipCode           String
  profileImage      String?
  employeeId        String           @unique
  userName          String
  employeeType      String
  workEmail         String
  department        String
  designation       String
  workingDays       String
  joiningDate       DateTime
  officeLocation    String
  appointmentLetter String?
  salarySlips       String?
  relievingLetter   String?
  experienceLetter  String?
  slackId           String?
  skypeId           String?
  githubId          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  user              User             @relation(fields: [id], references: [id], onDelete: Cascade)
  attendance        Attendance[]
  notifications     Notification[]
  leaveRequests     LeaveRequest[]
}

model PendingEmployee {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @unique @db.ObjectId // Reference to the User
  firstName          String
  lastName           String
  mobileNumber       String?
  email              String    
  dateOfBirth        DateTime?
  maritalStatus      String?
  gender             String?
  nationality        String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  profileImage       String?
  
  // Professional Info
  employeeId         String    
  userName           String?
  employeeType       String?
  workEmail          String?   
  department         String?
  designation        String?
  workingDays        String?
  joiningDate        DateTime?
  officeLocation     String?
  
  // Documents
  appointmentLetter  String?
  salarySlips        String?
  relievingLetter    String?
  experienceLetter   String?
  
  slackId            String?
  skypeId            String?
  githubId           String?
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}