generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId  
  email         String   @unique
  hashedPassword String?
  name          String?
  emailVerified DateTime?
  avatar        String?
  image         String?
  role          String?  @default("Employee")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  employee      Employee? @relation // One-to-one relation with Employee
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)  // Now references `id`
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)  // Update to `id`
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id])  // Update to `id`
  @@unique([userId, credentialID])
}

model Employee {
  id                 String    @id @map("_id") @db.ObjectId // Remove @default(auto()), use User's id
  firstName          String
  lastName           String
  mobileNumber       String?
  email              String    @unique
  dateOfBirth        DateTime?
  maritalStatus      String?
  gender             String?
  nationality        String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  profileImage       String?
  
  // Professional Info
  employeeId         String    @unique
  userName           String?
  employeeType       String?
  workEmail          String?   @unique
  department         String?
  designation        String?
  workingDays        String?
  joiningDate        DateTime?
  officeLocation     String?
  
  // Documents
  appointmentLetter  String?
  salarySlips        String?
  relievingLetter    String?
  experienceLetter   String?
  
  slackId            String?
  skypeId            String?
  githubId           String?
  
  user               User      @relation(fields: [id], references: [id], onDelete: Cascade)
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}